<?xml version="1.0"?>

<xsl:stylesheet
  version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main"
  exclude-result-prefixes="w"
  >

  <xsl:template match="w:p[w:pPr/w:numPr/w:numId/@w:val]">
    <xsl:variable name="list-id" select="generate-id(.)"/>
    <xsl:variable name="num-id" select="./w:pPr/w:numPr/w:numId/@w:val"/>

    <ol listLevel="0" listId="{$list-id}" numId="{$num-id}">
      <xsl:choose>
        <xsl:when test="w:pPr/w:numPr/w:ilvl/@w:val = 0">
          <li><xsl:apply-templates/></li>
        </xsl:when>

        <xsl:otherwise>
          <xsl:call-template name="emit-sublist">
            <xsl:with-param name="level" select="1"/>
          </xsl:call-template>
        </xsl:otherwise>
      </xsl:choose>

      <xsl:for-each select="following-sibling::w:p[w:pPr/w:numPr/w:numId]">
        <xsl:variable name="most-recent-list-id" select="
          generate-id(
            preceding-sibling::w:p[
              preceding-sibling::w:p[1][not(w:pPr/w:numPr/w:ilvl/@w:val)] or not(./preceding-sibling::w:p[1])
            ][1]
          )
        "/>

        <xsl:if test="$list-id = $most-recent-list-id and preceding-sibling::w:p[1]/w:pPr/w:numPr/w:ilvl/@w:val &gt;= 0">
          <xsl:choose>
            <xsl:when test="w:pPr/w:numPr/w:ilvl/@w:val &gt; 0 and preceding-sibling::*[1][w:pPr/w:numPr/w:ilvl/@w:val = 0 or not(w:pPr/w:numPr/w:ilvl/@w:val)]">
              <xsl:call-template name="emit-sublist">
                <xsl:with-param name="level" select="1"/>
              </xsl:call-template>
            </xsl:when>

            <xsl:when test="w:pPr/w:numPr/w:ilvl/@w:val &gt; 0">
            <!-- emit nothing -->
            </xsl:when>

            <xsl:otherwise>
              <li><xsl:apply-templates/></li>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:if>

      </xsl:for-each>
    </ol>
  </xsl:template>

  <xsl:template match="
    w:p[
      ./w:pPr/w:numPr/w:numId/@w:val
      and preceding-sibling::w:p[1]/w:pPr/w:numPr/w:numId/@w:val
    ]
  ">
  <!-- emit nothing -->
  </xsl:template>

  <xsl:template name="emit-sublist">
    <xsl:param name="level"/>
    <xsl:variable name="list-id" select="generate-id(.)"/>
    <xsl:variable name="num-id" select="./w:pPr/w:numPr/w:numId/@w:val"/>

    <ol listLevel="{$level}" listId="{$list-id}" numId="{$num-id}">
      <xsl:choose>
        <xsl:when test="w:pPr/w:numPr/w:ilvl/@w:val = $level">
          <li><xsl:apply-templates/></li>
        </xsl:when>

        <xsl:otherwise>
          <xsl:call-template name="emit-sublist">
            <xsl:with-param name="level" select="$level + 1"/>
          </xsl:call-template>
        </xsl:otherwise>
      </xsl:choose>

      <xsl:for-each select="following-sibling::w:p[w:pPr/w:numPr/w:ilvl/@w:val &gt;= $level]">
        <xsl:variable name="most-recent-list-id" select="
          generate-id(
            preceding-sibling::*[
              w:pPr/w:numPr/w:ilvl/@w:val &gt;= $level
              and (preceding-sibling::w:p[1][not(w:pPr/w:numPr/w:ilvl/@w:val) or w:pPr/w:numPr/w:ilvl/@w:val &lt; $level]
              or not(preceding-sibling::w:p[1]))
            ][1]
          )
        "/>
 
        <xsl:if test="$list-id = $most-recent-list-id and preceding-sibling::w:p[1]/w:pPr/w:numPr/w:ilvl/@w:val &gt;= $level">
          <xsl:choose>
            <xsl:when test="w:pPr/w:numPr/w:ilvl/@w:val &gt; $level and preceding-sibling::w:p[1][w:pPr/w:numPr/w:ilvl/@w:val &lt;= $level or not(w:pPr/w:numPr/w:ilvl/@w:val)]">
              <xsl:call-template name="emit-sublist">
                <xsl:with-param name="level" select="$level + 1"/>
              </xsl:call-template>
            </xsl:when>

            <xsl:when test="w:pPr/w:numPr/w:ilvl/@w:val &gt; $level">
            <!-- emit nothing -->
            </xsl:when>

            <xsl:otherwise>
              <li><xsl:apply-templates/></li>
            </xsl:otherwise>
          </xsl:choose>

        </xsl:if>
      </xsl:for-each>
    </ol>

  </xsl:template>

</xsl:stylesheet>